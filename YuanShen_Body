Shader "Custom/YuanShen_Body"
{
    Properties
    {
        _BaseMap ("Base Map", 2D) = "white" {}
        _LightMap ("Light Map", 2D) = "white" {}
        _RampMap ("Ramp Map", 2D) = "white" {}
        _EmissionMap ("Emission Map", 2D) = "white" {}

        _ShadowColor ("Shadow Color", Color) = (0.2, 0.2, 0.2, 0.2)

        _SpecularScale ("Specular Scale", Float) = 1
        _SpecularPowerValue ("Specular Power Value", Float) = 1

        _EmissionColor ("Emission Color", Color) = (1, 1, 1, 1)
        _EmissionIntansity ("Emission Intansity", Float) = 1

        _BackColor ("Back Color", Color) = (1, 1, 1, 1)

        _OutlineColor ("Outline Color", Color) = (0, 0, 0, 0)
        _OutlineWidth ("Outline Width", Float) = 0.01
        _Factor ("Factor", Range(0, 1)) = 0.5

        [KeywordEnum(None,LightMap_R,LightMap_G,LightMap_B,LightMap_A,UV0,UV1,VertexColor,BaseColor,BaseColor_A)]
        _TestMode ("Test Mode", Int) = 0
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" "LightMode"="ForwardBase" "Queue"="Geometry" }
        //Cull Off
        LOD 100

        // 正面着色
        Pass
        {
            Cull Back
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #pragma fullforwardshadows
            #pragma multi_compile_fwdbase

            #include "UnityCG.cginc"
            #include "Lighting.cginc"
            #include "UnityGlobalIllumination.cginc"
            #include "AutoLight.cginc"

            float remap(float x, float t1, float t2, float s1, float s2)
            {
                return (x - t1) / (t2 - t1) * (s2 - s1) + s1;
            }

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv0 : TEXCOORD0;
                float2 uv1 : TEXCOORD1;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 vertexColor : Color;
            };

            struct v2f
            {
                float4 pos : SV_POSITION;
                float2 uv0 : TEXCOORD0;
                float2 uv1 : TEXCOORD1;
                float3 normal : TEXCOORD2;
                float3 tangent : TEXCOORD3;
                float3 worldPos : TEXCOORD4;
                float4 vertexColor : TEXCOORD5;
            };

            sampler2D _BaseMap;
            sampler2D _LightMap;
            sampler2D _RampMap;
            sampler2D _EmissionMap;

            float4 _ShadowColor;
            float _SpecularScale;
            float _SpecularPowerValue;
            float4 _EmissionColor;
            float _EmissionIntansity;

            int _TestMode;

            v2f vert (appdata v)
            {
                v2f o;
                o.pos = UnityObjectToClipPos(v.vertex);
                o.uv0 = v.uv0;
                o.uv1 = v.uv1;
                o.normal = UnityObjectToWorldNormal(v.normal);
                o.tangent = UnityObjectToWorldDir(v.tangent);
                o.worldPos = mul(unity_ObjectToWorld, v.vertex);
                o.vertexColor = v.vertexColor;

                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                float3 normal = normalize(i.normal);
                float3 tangent = normalize(i.tangent);
                float3 bitangent = normalize(cross(normal, tangent));
                float3 lightDir = normalize(UnityWorldSpaceLightDir(i.worldPos.xyz));
                float3 viewDir = normalize(UnityWorldSpaceViewDir(i.worldPos.xyz));
                float3 halfDir = normalize(lightDir + viewDir);
                float2 uv0 = i.uv0;
                //uv0.y = 1 - uv0.y;
                float2 uv1 = i.uv1;
                float4 vertexColor = i.vertexColor;

                float HdotV = dot(halfDir, viewDir);
                float NdotV = dot(normal, viewDir);
                float NdotL = dot(normal, lightDir);
                float NdotH = dot(normal, halfDir);

                float4 baseMap = tex2D(_BaseMap, uv0);
                float4 lightMap = tex2D(_LightMap, uv0);
                float4 emissionMap = tex2D(_EmissionMap, uv0);

                int mode = 1;
                if (_TestMode == mode++)
                    return lightMap.r;
                if (_TestMode == mode++)
                    return lightMap.g;  // 阴影 Mask
                if (_TestMode == mode++)
                    return lightMap.b;  // 漫反射 Mask
                if (_TestMode == mode++)
                    return lightMap.a;  // 漫反射 Mask
                if (_TestMode == mode++)
                    return float4(uv0, 0, 0);  // UV0
                if (_TestMode == mode++)
                    return float4(uv1, 0, 0);  // UV1
                if (_TestMode == mode++)
                    return vertexColor.xyzz;  // VertexColor
                if (_TestMode == mode++)
                    return baseMap.xyzz;  // BaseColor

                float halfLambert = NdotL * 0.5 + 0.5;
                float shadowMask = clamp(smoothstep(0.4, 0.6, NdotL), 0.1, 0.9);
                float2 rampUV = float2(shadowMask, 0.5);
                float3 ramp = tex2D(_RampMap, rampUV);
                float rampValue = smoothstep(0.5, 0.6, halfLambert);
                float3 diffuse = lerp(_ShadowColor * baseMap, baseMap, ramp);
                diffuse -= emissionMap.aaa;

                float3 specular = 0;
                specular = pow(saturate(NdotH), _SpecularPowerValue * lightMap.r) * _SpecularScale * lightMap.b;
                specular = max(specular, 0);

                float3 emission = emissionMap.a * _EmissionColor * _EmissionIntansity;

                float3 finalColor = diffuse + specular + emission;
                return float4(finalColor, 1);
            }
            ENDCG
        }

        // 背面着色
        Pass
        {
            Cull Front
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float4 pos : SV_POSITION;
                float2 uv : TEXCOORD0;
            };

            sampler2D _BaseMap;
            float4 _BackColor;

            v2f vert (appdata v)
            {
                v2f o;
                o.pos = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                float4 baseMap = tex2D(_BaseMap, i.uv);
                float4 col = baseMap * _BackColor;
                return col;
            }
            ENDCG
        }

        // 添加描边
        Pass
        {
            Tags { "LightMode"="Always" }
            Cull Front
            ZWrite On

            CGPROGRAM
            #pragma multi_compile_fog
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"

            float4 _OutlineColor;
            float _OutlineWidth;
            float _Factor;

            struct v2f
            {
                float4 pos : SV_POSITION;
                UNITY_FOG_COORDS(0)
            };

            v2f vert(appdata_full v)
            {
                v2f o;
                float3 dir0 = normalize(v.vertex.xyz);
                float3 dir1 = v.normal;
                float DdotD = dot(dir0, dir1);
                dir0 *= sign(DdotD);
                dir0 = dir0 * _Factor + dir1 * (1 - _Factor);
                v.vertex.xyz += dir0 * _OutlineWidth * 0.001;
                o.pos = UnityObjectToClipPos(v.vertex);
                UNITY_TRANSFER_FOG(o, o.pos);
                return o;
            }

            float4 frag(v2f i) : COLOR
            {
                float4 col = _OutlineColor;
                UNITY_APPLY_FOG(i.fogCoord, c);
                return col;
            }
            ENDCG
        }
    }
}
