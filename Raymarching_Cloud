Shader "Custom/CloudRaymarching"
{
    Properties
    {
        // 云层基础形状
        _CloudTex ("Cloud Tex", 2D) = "white" {}  // 云贴图
        _CloudScale ("Cloud Scale", Vector) = (20000, 20000, 20000, 20000)  // 云贴图缩放
        _CloudOpacity ("Cloud Opacity", Range(0, 1)) = 0.1  // 云层透明度
        // 云层高度和厚度
        _CloudHeight ("Cloud Height", Range(1000, 1500)) = 1000  // 云层高度
        _CloudThickness ("Cloud Thickness", Float) = 600  // 云层厚度
        _TopSurfaceScale ("Top Surface Scale", Range(-0.5, 2)) = 1  // 云层顶部缩放
        _BottomSurfaceScale ("Bottom Surface Scale", Float) = 0.6  // 云层底部缩放
        // 云层动画
        _CloudSpeed ("Cloud Speed", Vector) = (100, 100, 100, 100)  // 云层速度
        // 天空和云层颜色
        _SkyColor ("Sky Color", Color) = (1, 1, 1, 1)  // 天空颜色
        _CloudColor ("Cloud Color", Color) = (1, 1, 1, 1)  // 云层颜色
        _FarCloudColorAmount ("Far Cloud Color Amount", Range(0, 1)) = 0.1  // 远处云层颜色占比
        _NearCloudColorAmount ("Near Cloud Color Amount", Range(0, 1)) = 0.1  // 近处云层颜色占比
        // 地面颜色
        _GroundColor ("Ground Color", Color) = (1, 1, 1, 1)  // 地面颜色
        _GroundColorAmount ("Ground Color Amount", Range(0, 0.1)) = 0.01  // 地面颜色占比
        // 云层边缘过渡
        _CloudSoftness ("Cloud Softness", Range(0, 1)) = 0.5  // 云层边缘柔化
        _CloudEdgeScale ("Cloud Edge Scale", Range(0, 1)) = 0.1  // 云层边缘缩放
        _GradientTex ("Gradient Tex", 2D) = "white" {}  // 云层渐变贴图
    }
    SubShader
    {
        Tags { "Queue"="Background" "RenderType"="Background" "PreviewType"="Skybox" }  // Skybox 的标签类型

        Cull Off ZWrite Off

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
            };

            struct v2f
            {
                float4 vertex : SV_POSITION;
                float3 ray : TEXCOORD0;
            };

            // 云层基础形状
            sampler2D _CloudTex;
            float4 _CloudScale;
            float _CloudOpacity;

            // 云层高度和厚度
            float _CloudHeight;
            float _CloudThickness;
            float _TopSurfaceScale;
            float _BottomSurfaceScale;

            // 云层动画
            float4 _CloudSpeed;

            // 天空和云层颜色
            float4 _SkyColor;
            float4 _CloudColor;
            float _FarCloudColorAmount;
            float _NearCloudColorAmount;

            // 地面颜色
            float4 _GroundColor;
            float _GroundColorAmount;
            
            // 云层边缘过渡
            float _CloudSoftness;
            float _CloudEdgeScale;
            sampler2D _GradientTex;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.ray = v.vertex.xyz;

                return o;
            }

            // 光线步进
            float4 raymarching(float3 ro, float3 rd)  // （起始位置，步长）
            {
                if (rd.y >= 0)  // 区分天空和地面
                {
                    rd = rd / rd.y;  // 保持步进方向向上

                    float4 c = 0;  // 最终颜色
                    const int maxStep = 64;  // 迭代次数
                    float3 position = ro + rd * (_CloudHeight - ro.y);  // 初始位置
                    float3 t = rd * _CloudThickness / maxStep;  // 步进值
                    float stepOpacity = _CloudOpacity;

                    // 云层和天空颜色的融合
                    float farcloudColorAmount = 1 - (1 / (_FarCloudColorAmount * length(rd) + 1));
                    c = float4(_CloudColor.rgb * farcloudColorAmount, farcloudColorAmount);

                    for (int i = 0; i < maxStep; i++)
                    {
                        position += t;  // 每次步进后的位置

                        float2 uv0 = (position.xz + _CloudSpeed.xy * _Time.y) / _CloudScale.xy;
                        float cloud0 = tex2D(_CloudTex, uv0).r;  // 采集云贴图

                        float2 uv1 = (position.xz + _CloudSpeed.zw * _Time.y) / _CloudScale.zw;
                        float2 uv2 = uv1;
                        uv2.y += 0.5;

                        float cloud1 = tex2D(_CloudTex, uv1).r;
                        float cloud2 = tex2D(_CloudTex, uv2).r;

                        // 控制云层顶部和底部
                        float cloudTopHeight = 1 - (cloud0 * _TopSurfaceScale + cloud1 * _CloudEdgeScale);  // （经验公式）
                        float cloudBottomHeight = cloud0 * _BottomSurfaceScale + cloud2 * _CloudEdgeScale;

                        float f = (position.y - _CloudHeight) / _CloudThickness;
                        if (f > cloudBottomHeight && f < cloudTopHeight)
                        {
                            float distanceToSurface = min(cloudTopHeight - f, f - cloudBottomHeight);
                            float localOpacity = saturate(distanceToSurface / _CloudSoftness);

                            // 添加渐变
                            float cloudTopHeightSmooth = 1 - cloud0 * _TopSurfaceScale;
                            float cloudDrakness = 1 - saturate(cloudTopHeightSmooth - f);
                            float4 gradientColor = tex2D(_GradientTex, float2(cloudDrakness, 0));

                            c += (1 - c.a) * localOpacity * stepOpacity * gradientColor;

                            // 当云的 a 通道接近 1 时，停止叠加云贴图
                            if (c.a > 0.99)
                                break;
                        }
                    }

                    // 最终云层和天空的融合
                    float nearCloudColorAmount = 1 - (1 / (_NearCloudColorAmount * length(rd) + 1));
                    float4 totalSkyColor = lerp(_SkyColor, _CloudColor, nearCloudColorAmount);
                    c += (1 - c.a) * totalSkyColor;

                    return c;
                }
                else
                {
                    rd = rd / rd.y;
                    float groundColorAmount = 1 - (1 / (_GroundColorAmount * length(rd) + 1));
                    return lerp(_GroundColor, _CloudColor, groundColorAmount);
                }
            }

            fixed4 frag (v2f i) : SV_Target
            {
                float3 ro = _WorldSpaceCameraPos.xyz;  // 相机位置
                float3 rd = normalize(i.ray);  // 步进方向
                float4 rayMarchingColor = raymarching(ro, rd);

                return rayMarchingColor;
            }
            ENDCG
        }
    }
}
