Shader "Custom/CloudShadow"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _Repeat ("Repeat", Range(0, 0.1)) = 0.1
        _SpeedX ("Speed X", Float) = 0.1
        _SpeedY ("Speed Y", Float) = 0.1
        _Color ("Color", Color) = (0, 0, 0, 0)
        _Alpha ("Alpha", Range(0.5, 1)) = 0.5
    }
    SubShader
    {
        Tags { "RenderType"="Transparent" "Queue"="Transparent" }  // 半透明
        LOD 100

        Pass
        {
            ZWrite Off  // 半透明
            ZTest Always
            Blend SrcAlpha OneMinusSrcAlpha

            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            // make fog work
            //#pragma multi_compile_fog

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float3 ray : TEXCOORD1;  // 指向
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;

            sampler2D _CameraDepthTexture;  // 声明相机深度贴图

            float _Repeat;
            float _SpeedX;
            float _SpeedY;
            float4 _Color;
            float _Alpha;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                float3 worldPos = mul(unity_ObjectToWorld, v.vertex);
                o.ray = worldPos - _WorldSpaceCameraPos;  // 相机 -> 顶点
                //UNITY_TRANSFER_FOG(o,o.vertex);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                float depth = Linear01Depth(SAMPLE_DEPTH_TEXTURE(_CameraDepthTexture, i.uv));  // 获取深度纹理，转换至(0,1)空间
                float3 worldPos = i.ray * depth + _WorldSpaceCameraPos;  // 在平面上重建场景
                
                float2 worldUV = worldPos.xz * _Repeat;
                float2 uv = worldUV + _Time.x * float2(_SpeedX, _SpeedY);

                float3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;
                float cloudShadow = tex2D(_MainTex, uv).r * (1 - depth) * _Alpha;
                float4 col = float4(_Color.rgb * ambient, cloudShadow);

                return col;
            }
            ENDCG
        }
    }
}
