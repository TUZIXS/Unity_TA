Shader "Custom/YuanShen_Skybox"
{
    Properties
    {
        _BaceColor ("Bace Color", Color) = (1, 1, 1, 1)
        _BaceMap ("Bace Map", 2D) = "white" {}
        _BaceSpeed ("Bace Speed", Float) = 1

        _FogColor ("Fog Color", Color) = (1, 1, 1, 1)
        _FogColorNoise ("Fog Color Noise", 2D) = "white" {}
        _FogSpeed ("Fog Speed", Float) = 1

        _StarColorMap ("Star Color Map", 2D) = "white" {}
        _StarColorIntensity ("Star Color Intensity", Range(0, 1)) = 0.5

        _EdgeWidth ("Edge Width", Range(0, 0.2)) = 0.1
    }
    SubShader
    {
        Tags { "Queue"="Background" "RenderType"="Background" "PreviewType"="Skybox" }  // Skybox 的标签类型

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
                float3 ray : TEXCOORD1;
            };

            struct v2f
            {
                float4 vertex : SV_POSITION;
                float2 uvBace : TEXCOORD0;
                float2 uvFog : TEXCOORD1;
                float2 uvStar : TEXCOORD2;
                float3 ray : TEXCOORD3;
            };

            float4 _BaceColor;
            sampler2D _BaceMap;
            float4 _BaceMap_ST;
            float _BaceSpeed;

            float4 _FogColor;
            sampler2D _FogColorNoise;
            float4 _FogColorNoise_ST;
            float _FogSpeed;

            sampler2D _StarColorMap;
            float4 _StarColorMap_ST;
            float _StarColorIntensity;

            float _EdgeWidth;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);

                o.uvBace = v.uv;
                o.uvBace.x -= _Time.x * _BaceSpeed;

                o.uvFog = v.uv;
                o.uvFog = float2(o.uvFog.x + _Time.x * _FogSpeed, o.uvFog.y - _Time.x * _FogSpeed);

                o.uvStar = v.uv;
                o.uvStar.x += _Time.x * 2;

                o.ray = normalize(v.vertex.xyz);

                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                float4 bace = tex2D(_BaceMap, i.uvBace);
                
                float4 fog = 1 - tex2D(_FogColorNoise, i.uvFog / _FogColorNoise_ST);
                fog = pow(fog, 1.2) * _FogColor;

                float starAlpha = bace.r;
                float4 star = tex2D(_StarColorMap, i.uvStar);
                float4 grayColor = float4(0.5, 0.5, 0.5, 1);
                star = lerp(grayColor, star, _StarColorIntensity);
                star *= starAlpha;

                float edge = i.ray.y;
                edge = smoothstep(_EdgeWidth, 0, edge);
                edge *= _FogColor;

                bace = (1 - bace) * _BaceColor;
                float4 col = (bace + fog) * 0.55 + edge + star;

                return col;
            }
            ENDCG
        }
    }
}
