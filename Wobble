Shader "Custom/Wobble"
{
    Properties
    {
        _FillAmount ("Fill Amount", Range(-1, 1)) = 0.5  // 填充量
        _WobbleX ("Wobble X", Range(-45, 45)) = 0  // X轴旋转角度
        _WobbleZ ("Wobble Z", Range(-45, 45)) = 0  // Z轴旋转角度
        _LiquidColor ("LiquidColor", Color) = (1, 1, 1, 1)  // 液体颜色
        _FoamColor ("Foam Color", Color) = (1, 1, 1, 1)  // 泡沫颜色
        _FoamHeight ("Foam Height", Range(0, 0.1)) = 0.05  // 泡沫厚度
        _TopColor ("Top Color", Color) = (1, 1, 1, 1)  // 表面颜色
        _LiquidRimPower ("Liquid Rim Power", Range(0, 100)) = 10  // 边缘光范围
        _LiquidRimIntensity ("Liquid Rim Intensity", Range(0, 100)) = 10  // 边缘光强度
        _LiquidSpecularPower ("Liquid Specular Power", Range(0, 100)) = 10  // 高光范围
        _LiquidSpecularIntensity ("Liquid Specular Intensity", Range(0, 100)) = 10  // 高光强度

        _BottleThickness ("Bottle Thickness", Range(0, 0.1)) = 0.05  // 容器厚度
        _BottleColor ("Bottle Color", Color) = (1, 1, 1, 1)  // 容器颜色
        _BottleRimPower ("Bottle Rim Power", Range(0, 100)) = 10  // 边缘光范围
        _BottleRimIntensity ("Bottle Rim Intensity", Range(0, 100)) = 10  // 边缘光强度
        _BottleSpecularPower ("Bottle Specular Power", Range(0, 100)) = 10  // 高光范围
        _BottleSpecularIntensity ("Bottle Specular Intensity", Range(0, 100)) = 10  // 高光强度
    }
    SubShader
    {
        CGINCLUDE

        // 边缘光：
        float _rim(float3 viewDir, float3 normal, float power, float intensity)
        {
            float3 _viewDir = normalize(viewDir);
            float3 _normal = normalize(normal);

            float NdotV = max(0, dot(_normal, _viewDir));
            float rim = pow(NdotV, power) * intensity;
            rim = smoothstep(0.5, 0, rim);

            return rim;
        }

        // 高光：
        float _specular(float3 viewDir, float3 lightDir, float3 normal, float power, float intensity)
        {
            float3 _viewDir = normalize(viewDir);
            float3 _lightDir = normalize(lightDir);
            float3 _normal = normalize(normal);

            float3 halfVector = normalize(_lightDir + _viewDir);
            float HdotN = max(0, dot(halfVector, _normal));
            float specular = pow(HdotN, power) * intensity;

            return specular;
        }
        
        ENDCG

        // 渲染液体：
        Pass
        {
            Tags { "RenderType"="Opaque" }

            Blend SrcAlpha OneMinusSrcAlpha  // 透明度混合
            Cull Off  // 关闭剔除（双面显示）
            AlphaToMask On  // 保留Alpha的效果

            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
                float3 normal : NORMAL;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
                float fill : TEXCOORD1;
                float3 worldView : TEXCOORD2;
                float3 worldNormal : TEXCOORD3;
            };

            float _FillAmount;
            float _WobbleX;
            float _WobbleZ;

            float4 _LiquidColor;

            float4 _FoamColor;
            float _FoamHeight;

            float4 _TopColor;

            float _LiquidRimPower;
            float _LiquidRimIntensity;
            
            float _LiquidSpecularPower;
            float _LiquidSpecularIntensity;

            float _BottleThickness;

            // 旋转：
            float2 _rotateAroundAxis(float2 vertex, float degree)
            {
                float sina, cosa;
                float radian = degree * UNITY_PI / 180;
                sincos(radian, sina, cosa);

                float2x2 m = float2x2(cosa, sina, -sina, cosa);
                return mul(m, vertex);
            }

            v2f vert (appdata v)
            {
                v2f o;
                v.vertex.xyz -= _BottleThickness * v.normal;  // 缩边获得容器厚度  
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;

                float4 vertex = v.vertex;
                // 对模型空间内顶点做旋转变换：
                // 绕 x轴 旋转：
                vertex.yz = _rotateAroundAxis(vertex.yz, _WobbleX);
                // 绕 y轴 旋转：
                vertex.xy = _rotateAroundAxis(vertex.xy, _WobbleZ);

                // 绘制水平面：
                // 相对世界坐标 = 世界空间下顶点坐标 - 世界空间下物体坐标
                //float3 rWorldPos = mul(unity_ObjectToWorld, v.vertex).xyz - float3(unity_ObjectToWorld[0][3], unity_ObjectToWorld[1][3], unity_ObjectToWorld[2][3]);
                float3 rWorldPos = mul((float3x3)unity_ObjectToWorld, vertex.xyz);
                o.fill = rWorldPos.y;

                float3 aWorldPos = mul(unity_ObjectToWorld, vertex).xyz;  // 绝对世界坐标
                o.worldView = UnityWorldSpaceViewDir(aWorldPos);
                o.worldNormal = UnityObjectToWorldNormal(v.normal);

                return o;
            }

            fixed4 frag (v2f i, float facing: VFACE) : SV_Target  // facing：正面为1，背面为0
            {
                // 液体：
                float liquidPart = step(i.fill, _FillAmount);
                float3 liquidColor = liquidPart * _LiquidColor.rgb;

                // 泡沫：
                float foamPart = liquidPart - step(i.fill, _FillAmount - _FoamHeight);
                float3 foamColor = foamPart * _FoamColor.rgb;

                // 边缘光：
                float3 rim = _LiquidColor * _rim(i.worldView, i.worldNormal, _LiquidRimPower, _LiquidRimIntensity);

                // 高光：
                float3 lightDir = _WorldSpaceLightPos0.xyz;
                float3 worldNormal = lerp(i.worldNormal, -i.worldNormal, facing < 0);  // 获取背面法线向量
                float3 spec = _LiquidColor * _specular(i.worldView, lightDir, worldNormal, _LiquidSpecularPower, _LiquidSpecularIntensity);
                spec = smoothstep(0.5, 1, spec);

                float4 finalColor = 1;
                finalColor.rgb = liquidColor + foamColor + rim;

                // 液体表面：
                finalColor.rgb = lerp(finalColor.rgb, _TopColor.rgb, facing < 0);  // 背面着色
                finalColor.rgb += spec;
                finalColor.a = liquidPart;

                return finalColor;
            }
            ENDCG
        }

        // 渲染容器：
        Pass
        {
            Tags { "RenderType"="Transparent" "Queue"="Transparent" }

            Blend SrcAlpha OneMinusSrcAlpha  // 透明度混合
            ZWrite Off

            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
                float3 normal : NORMAL;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
                float3 worldView : TEXCOORD1;
                float3 worldNormal : TEXCOORD2;
            };

            float4 _BottleColor;
            float _BottleRimPower;
            float _BottleRimIntensity;
            float _BottleSpecularPower;
            float _BottleSpecularIntensity;


            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;

                float3 aWorldPos = mul(unity_ObjectToWorld, v.vertex).xyz;  // 绝对世界坐标
                o.worldView = UnityWorldSpaceViewDir(aWorldPos);
                o.worldNormal = UnityObjectToWorldNormal(v.normal);

                return o;
            }

            fixed4 frag (v2f i, float facing: VFACE) : SV_Target  // facing：正面为1，背面为0
            {
                // 边缘光：
                float3 rim = _BottleColor * _rim(i.worldView, i.worldNormal, _BottleRimPower, _BottleRimIntensity);

                // 高光：
                float3 lightDir = _WorldSpaceLightPos0.xyz;
                float3 spec = _BottleColor * _specular(i.worldView, lightDir, i.worldNormal, _BottleSpecularPower, _BottleSpecularIntensity);
                //spec = smoothstep(0.5, 1, spec);

                float4 finalColor = 1;
                finalColor.rgb = _BottleColor.rgb + rim + spec;
                finalColor.a = _BottleColor.a;

                return finalColor;
            }
            ENDCG
        }
    }
}
