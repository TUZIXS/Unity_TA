Shader "Custom/Raymarching"
{
    Properties
    {
        
    }
    SubShader
    {
        Tags { "RenderType"="Transparent" "Queue"="Transparent" }  // 半透明
        LOD 100

        Pass
        {
            Blend SrcAlpha One  // 叠加
            ZWrite Off

            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float3 worldPos : TEXCOORD1;
                float4 ditherClipPos : TEXCOORD2;
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;

            uniform float4 _VolumetricLightPos;  // 传递光源位置
            uniform float4 _VolumetricLightColor;  // 传递光源颜色
            uniform float _CustomShadowIntensity;  // 传递阴影强度
            uniform sampler2D _CustomShadowMap;  // 传递阴影贴图
            uniform sampler2D _Dither;  // 传递噪声贴图
            uniform float4 _VolumetricLightForward;  // 传递光源 forward 方向
            uniform float _CustomLightShadowBias;  // 传递偏移值
            uniform float4x4 _CustomLightSpaceMatrix;  // 传递旋转矩阵（世界空间 -> 光源空间）

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
                o.ditherClipPos = mul(_CustomLightSpaceMatrix, float4(o.worldPos, 1));
                return o;
            }

            // 采集阴影贴图
            float shadowCalculation(float4 wPos)
            {
                float4 shadowCoord = mul(_CustomLightSpaceMatrix, wPos);
                float2 uv = shadowCoord.xy / shadowCoord.w;
                uv = uv * 0.5 + 0.5;

                // dx：-1，opengl：1
                if (_ProjectionParams.x < 0)
                    uv.y = 1 - uv.y;
                
                float4 col = tex2D(_CustomShadowMap, uv);
                float sampleDepth = DecodeFloatRGBA(col);

                // 从世界空间拿到深度值
                float depth = shadowCoord.z / shadowCoord.w;

                #if defined (SHADER_TARGET_GLSL)
                    depth = depth * 0.5 + 0.5;  // (-1, 1) -> (0, 1)
                #elif defined (UNITY_REVERSED_Z)
                    depth = 1 - depth;  // (1, 0) -> (0, 1)
                #endif

                float bias = _CustomLightShadowBias;
                float shadow = sampleDepth + bias < depth ? _CustomShadowIntensity : 1;

                // 处理下边界
                if (depth > 1 || depth < 0)
                    shadow = 1;

                return shadow;
            }

            float3 raymarching(float3 startPos, float3 viewDir, float2 ditherUV)
            {
                float viewDistance = length(startPos - _WorldSpaceCameraPos.xyz);  // 观察点和摄像机的距离

                const int step = 200;  // 步进的次数
                float oneStep = viewDistance / step;  // 每次步进的距离

                // 使用噪声贴图给步进值添加随机
                float ditherValue = tex2D(_Dither, ditherUV).r;
                oneStep *= ditherValue;

                float3 finalLight = 0;
                for (int i = 0; i < step; i++)  // 每次步进采集 shadow map
                {
                    // 当前步进的位置
                    float3 samplePos = startPos + viewDir * oneStep * i;

                    // 采样点到体积光源的方向向量
                    float3 sampleToLightDir = samplePos - _VolumetricLightPos.xyz;

                    // 采样点到体积光源的距离
                    // 距离在 0-1 范围内的时候，光强会非常大，这里将距离 +1 来避免此问题
                    float sampleToLightDistance = length(sampleToLightDir) + 1;
                    float sampleToLightDistanceInv = 1 / sampleToLightDistance;

                    // 采样点的光强与距离的平方成反比
                    float sampleLightIntensity = sampleToLightDistanceInv * sampleToLightDistanceInv * _VolumetricLightPos.w;

                    // 采集阴影贴图
                    float shadow = shadowCalculation(float4(samplePos, 1));

                    // 处理观察点在体积光内外的情况
                    // 采样点和光源 forward 的点积
                    float3 sampleToLightDirNorm = normalize(sampleToLightDir);
                    float ndotl = dot(sampleToLightDirNorm, _VolumetricLightForward.xyz);
                    // angle 是体积光张角的一半，如果 ndotl 大于 cos(angle)，则表示目前采样点在体积光范围内
                    float inLight = smoothstep(_VolumetricLightForward.w, 1, ndotl);

                    // 最终灯光
                    finalLight += _VolumetricLightColor * sampleLightIntensity * shadow * inLight;
                }
                return finalLight;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                float3 viewDir = normalize(UnityWorldSpaceViewDir(i.worldPos));

                float3 volumetricLight = raymarching(i.worldPos, viewDir, i.ditherClipPos.xy);

                float4 col = float4(volumetricLight, 1);
                return col;
            }
            ENDCG
        }
    }
}
